<iscontent personalized="true" type="text/html" charset="UTF-8" compact="true">

<isif condition="#NOT(ProductBO:isEndOfLife)#">
	
	<isCurrentCustomerBO currentcustomerbo="CustomerBO">
	<isGetProductPriceContext CustomerBO="#CustomerBO#" ProductPriceContext="ProductPriceContext">
	
	<isset name="ProductPrice" value="#ProductBO:Extension("Pricing")#" scope="request"/>
	<isset name="SalePrice" value="#ProductPrice:Price("SalePrice", Currency, ProductPriceContext)#" scope="request"/>
	<isset name="ListPrice" value="#ProductPrice:Price("ListPrice", Currency, ProductPriceContext)#" scope="request"/>
	
	
	<!---
	-- The following logic determines whether or not this product has a sale
	-- price and will be showing the sale price component.  Since the sale
	-- prices exist in the product object regardless of whether the item is on
	-- sale, complex logic is necessary to discover whether certain sale prices
	-- are less than certain list prices, accounting for the fact that any or
	-- all of these variables may not actually exist. The end result is that
	-- #finalPrice# will be 1 if the list price is the final product price, or
	-- 0 if the final product price is the sale price.
	--->
	<isset name="finalPrice" value="#1#" scope="request"/>
	<isset name="greaterPrice" value="#0#" scope="request"/>
	
	<isif condition="#ShowInformationalPrice EQ "true"#">
		<isset name="greaterPrice" value="#1#" scope="request"/>
		<isif condition="#ListPrice:Price:Available#"> <!--- skip comparison against prices that are invalid --->
			<isif condition="#ListPrice:PriceGreaterThan(SalePrice)#">
				<isset name="finalPrice" value="#0#" scope="request"/>
				<isset name="greaterPrice" value="#0#" scope="request"/>
			<iselse>
				<isif condition="#NOT SalePrice:PriceGreaterThan(ListPrice)#"> <!-- Determines if the SalePrice is equal to the Comparable Price Type -->
					<isset name="greaterPrice" value="#0#" scope="request"/>
				</isif>
			</isif>
		</isif>
	</isif>
	
	<div class="current-price <isif condition="#finalPrice EQ 0#"> sale-price<iselseif condition="#greaterPrice EQ 1#"> sale-price-higher</isif>">
			<isif condition="#(SalePrice:Range) AND NOT(SalePrice:PriceRange:MinimumPrice:Equal(SalePrice:PriceRange:MaximumPrice))#">
				<istext key="product.price.salePriceMinMax.text" parameter0="#getValue(SalePrice:PriceRange:MinimumPrice)#" parameter1="#getValue(SalePrice:PriceRange:MaximumPrice)#"/>			
			<iselseif condition="#SalePrice:Price:Available AND (finalPrice EQ 0)#">
				<istext key="product.price.salePricePrefix.text" parameter0="#getValue(SalePrice:Price)#"/>
			<iselseif condition="#SalePrice:Price:Available#">
				<isif condition="#ProductBO:isProductMaster#">
					<istext key="product.price.salePriceFallback.text" parameter0="#getValue(SalePrice:PriceRange:MinimumPrice)#"/><!--- fallback sale price--->
				<iselse>
					<istext key="product.price.salePriceFallback.text" parameter0="#getValue(SalePrice:Price)#"/><!--- fallback sale price--->
				</isif>
			<iselse>
				<istext key="product.price.na.text" />
			</isif>
		<ISProductPriceAdditionalText ProductBO="#ProductBO#">
	</div>
	
	
	<!--- An Informational Price (the List Price) is shown if it is higher than the Sale Price --->
	<isif condition="#ShowInformationalPrice EQ "true"#">
		<isif condition="#ListPrice:Price:Available#">
			<isset name="displayCondition" value="true" scope="request"/>
			<!--- determine if the price should be shown --->
			<isif condition="#SalePrice:Price:Available#"> <!--- skip comparison against prices that are invalid --->
				<isif condition="#NOT ListPrice:PriceGreaterThan(SalePrice)#">
					<isset name="displayCondition" value="false" scope="request"/>
				</isif>
			</isif>
			<isif condition="#displayCondition EQ 'true'#">
				<div class="old-price">
					<isif condition="#ListPrice:Range#">
						<istext key="product.price.listPriceMinMax.text" parameter0="#getValue(ListPrice:PriceRange:MinimumPrice)#" parameter1="#getValue(ListPrice:PriceRange:MaximumPrice)#"/>
					<iselseif condition="#ListPrice:Price:Available#">
						<isif condition="#ProductBO:isProductMaster#">
							<istext key="product.price.listPriceFallback.text" parameter0="#getValue(ListPrice:PriceRange:MinimumPrice)#"/><!--- fallback sale price--->
						<iselse>
							<istext key="product.price.listPriceFallback.text" parameter0="#getValue(ListPrice:Price)#"/><!--- fallback sale price--->
						</isif>
					<iselse>
						<istext key="product.price.na.text" />
					</isif>
				</div>
			</isif>
		</isif>
	</isif>
	<div>
		<isloop iterator="SalePrice:ScaledPrices" alias="Scale">
			<isif condition="#Scale:Quantity:Value > 1#">
				<isif condition="#isDefined(PreviousScale)#">
					<%@page import="java.math.BigDecimal" %>
					<%
					BigDecimal limit = ((BigDecimal)getObject("Scale:Quantity:Value"));
					int upperBound = limit.subtract(new BigDecimal("1")).intValue();
					int lowerBound = ((BigDecimal)getObject("PreviousScale:Quantity:Value")).intValue();
					%>
					<isif condition="#<%=lowerBound%> NE <%=upperBound%>#">
						<istext key="product.price.scalePrice"
							parameter0="#<%=lowerBound%> . '-' . <%=upperBound%>#"
							parameter1="#getValue(PreviousScale:Price)#">
						<br />
					<iselse>
						<istext key="product.price.scalePrice"
							parameter0="#<%=lowerBound%>#"
							parameter1="#getValue(PreviousScale:Price)#">
						<br />
					</isif>
				<iselse>
					<h4><istext key="product.price.scalePrice.heading"></h4>
				</isif>
				<isset name="PreviousScale" value="#Scale#" scope="request"/>
			</isif>
		</isloop>
		<isif condition="#isDefined(PreviousScale)#">
			<%
				int lowerBound = ((BigDecimal)getObject("PreviousScale:Quantity:Value")).intValue();
			%>
			<istext key="product.price.scalePrice"
				parameter0="#<%=lowerBound%> . '+'#"
				parameter1="#getValue(PreviousScale:Price)#">
			<br />
		</isif>
	</div>
</isif>
