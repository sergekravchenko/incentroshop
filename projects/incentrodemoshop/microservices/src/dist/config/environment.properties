# defines which service should be started within a server
# the service database connection can be configured together - see javax.persistence section
# or they can be configured separately - see  <NAME>PU.javax.persistence section 
services=Scheduling,RecurringOrder

# name, which is used to register at eureka
eureka.name=<@microserviceApplicationName@>

eureka.port=<@eurekaPort@>
port=<@eurekaPort@>

#example section using specific database connection for recurring oder service for postgres
#RecurringOrdersPU.javax.persistence.jdbc.driver=org.postgresql.Driver
#RecurringOrdersPU.javax.persistence.jdbc.url=jdbc:postgresql://<HOST>:<PORT>/postgres
#RecurringOrdersPU.javax.persistence.jdbc.user=<USERNAME>
#RecurringOrdersPU.javax.persistence.jdbc.password=<PASSWORD>

#example section using specific database connection for scheduling service for derby
#SchedulingPU.javax.persistence.jdbc.driver=org.apache.derby.jdbc.EmbeddedDriver
#SchedulingPU.javax.persistence.jdbc.url=jdbc:derby:build/testdb;create=true
#SchedulingPU.javax.persistence.jdbc.user=test
#SchedulingPU.javax.persistence.jdbc.password=test

#example section using one database connection for all services for derby
#javax.persistence.jdbc.driver=<@databaseDriver@>
#javax.persistence.jdbc.url=<@databaseURL@>
#javax.persistence.jdbc.user=<@databaseUserName@>
#javax.persistence.jdbc.password=<@databaseUserPassword@>

javax.persistence.jdbc.driver=org.apache.derby.jdbc.EmbeddedDriver

#mapping to service names, so other service can get instances from eureka of this type
#intershop.naming.service.RecurringOrder=
#intershop.naming.service.Scheduling=
intershop.naming.service.Basket=<@intershopApplicationName@>